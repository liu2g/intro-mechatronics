
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f9  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000660  00000000  00000000  000009ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d4  00000000  00000000  0000104d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001324  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000364  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000024f  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000192f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_11>
  30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  58:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  5c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  60:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  68:	ac 00       	.word	0x00ac	; ????
  6a:	7c 00       	.word	0x007c	; ????
  6c:	7f 00       	.word	0x007f	; ????
  6e:	82 00       	.word	0x0082	; ????
  70:	85 00       	.word	0x0085	; ????
  72:	88 00       	.word	0x0088	; ????
  74:	8b 00       	.word	0x008b	; ????
  76:	8e 00       	.word	0x008e	; ????
  78:	91 00       	.word	0x0091	; ????
  7a:	94 00       	.word	0x0094	; ????
  7c:	97 00       	.word	0x0097	; ????
  7e:	9a 00       	.word	0x009a	; ????
  80:	9d 00       	.word	0x009d	; ????
  82:	a0 00       	.word	0x00a0	; ????
  84:	a3 00       	.word	0x00a3	; ????
  86:	a6 00       	.word	0x00a6	; ????

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_clear_bss>:
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
  9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
  9e:	a2 30       	cpi	r26, 0x02	; 2
  a0:	b2 07       	cpc	r27, r18
  a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
  a4:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  a8:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <__vector_11>:

volatile int seg_bin;
int bin_to_segs (int);

ISR(TIMER1_COMPA_vect)
{
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
	cli();
  be:	f8 94       	cli
	if (PORTB0) seg_bin = PIND & 0b00001111; //Lower 4 bits
	else seg_bin = PIND >> 4 & 0b00001111; //Upper 4 bits
  c0:	89 b1       	in	r24, 0x09	; 9
  c2:	82 95       	swap	r24
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	PORTB ^= (1<<PORTB0); //Toggle PB0, PB1 auto toggle on interrupt
  d0:	95 b1       	in	r25, 0x05	; 5
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	89 27       	eor	r24, r25
  d6:	85 b9       	out	0x05, r24	; 5
	sei();
  d8:	78 94       	sei
}
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <bin_to_segs>:
    }
}

int bin_to_segs (int bin_value) //Converts bin value from switches to 4 bit A-G segs
{
	switch (bin_value)
  e8:	80 31       	cpi	r24, 0x10	; 16
  ea:	91 05       	cpc	r25, r1
  ec:	90 f5       	brcc	.+100    	; 0x152 <bin_to_segs+0x6a>
  ee:	fc 01       	movw	r30, r24
  f0:	ec 5c       	subi	r30, 0xCC	; 204
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__tablejump2__>
	{
		case 0x0:
			return 0b1111110;
			break;
		case 0x1:
			return 0b0110000;
  f8:	80 e3       	ldi	r24, 0x30	; 48
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	08 95       	ret
			break;
		case 0x2:
			return 0b1101101;
  fe:	8d e6       	ldi	r24, 0x6D	; 109
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	08 95       	ret
			break;
		case 0x3:
			return 0b1111001;
 104:	89 e7       	ldi	r24, 0x79	; 121
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	08 95       	ret
			break;
		case 0x4:
			return 0b0110011;
 10a:	83 e3       	ldi	r24, 0x33	; 51
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	08 95       	ret
			break;
		case 0x5:
			return 0b1011011;
 110:	8b e5       	ldi	r24, 0x5B	; 91
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	08 95       	ret
			break;
		case 0x6:
			return 0b1011111;
 116:	8f e5       	ldi	r24, 0x5F	; 95
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	08 95       	ret
			break;
		case 0x7:
			return 0b1110000;
 11c:	80 e7       	ldi	r24, 0x70	; 112
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	08 95       	ret
			break;
		case 0x8:
			return 0b0000000;
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	08 95       	ret
			break;
		case 0x9:
			return 0b1110011;
 128:	83 e7       	ldi	r24, 0x73	; 115
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	08 95       	ret
			break;
		case 0xA:
			return 0b1110111;
 12e:	87 e7       	ldi	r24, 0x77	; 119
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	08 95       	ret
			break;
		case 0xb:
			return 0b0011111;
 134:	8f e1       	ldi	r24, 0x1F	; 31
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	08 95       	ret
			break;
		case 0xC:
			return 0b1001110;
 13a:	8e e4       	ldi	r24, 0x4E	; 78
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	08 95       	ret
			break;
		case 0xd:
			return 0b0111101;
 140:	8d e3       	ldi	r24, 0x3D	; 61
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	08 95       	ret
			break;
		case 0xE:
			return 0b1001111;
 146:	8f e4       	ldi	r24, 0x4F	; 79
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret
			break;
		case 0xF:
			return 0b1000111;
 14c:	87 e4       	ldi	r24, 0x47	; 71
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret
			break;
		default:
			return 0b0000000;
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret
int bin_to_segs (int bin_value) //Converts bin value from switches to 4 bit A-G segs
{
	switch (bin_value)
	{
		case 0x0:
			return 0b1111110;
 158:	8e e7       	ldi	r24, 0x7E	; 126
 15a:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			return 0b0000000;
				
	}
 15c:	08 95       	ret

0000015e <main>:
}

int main(void)
{
	//Pin config
	DDRD = 0;
 15e:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0b00000111;
 160:	87 e0       	ldi	r24, 0x07	; 7
 162:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00111111;
 164:	8f e3       	ldi	r24, 0x3F	; 63
 166:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<PORTB5); //On-board LED for debug
 168:	25 9a       	sbi	0x04, 5	; 4
	//Timer and interrupt config
	cli();
 16a:	f8 94       	cli
	TCCR1A = (0<<COM1A1)|(1<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM10); //Timer1 CTC by toggling PB1
 16c:	80 e4       	ldi	r24, 0x40	; 64
 16e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(1<<CS12)|(0<<CS11)|(0<<CS10); //Timer1 scaled by 256
 172:	8c e0       	ldi	r24, 0x0C	; 12
 174:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = (0<<ICIE1)|(0<<OCIE1B)|(1<<OCIE1A)|(0<<TOIE1); //Enable match interrupt
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	OCR1A = 62500; //1 sec
 17e:	84 e2       	ldi	r24, 0x24	; 36
 180:	94 ef       	ldi	r25, 0xF4	; 244
 182:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 186:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	//OCR1A = 15625; //250 ms
	//OCR1A = 6250;  //100 ms
	//OCR1A = 1875; //30 ms
	PORTB = (1<<PORTB0);
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	85 b9       	out	0x05, r24	; 5
	sei(); //Enable global interrupt
 18e:	78 94       	sei
	
	
    while (1) 
    {
		PORTC |= bin_to_segs(seg_bin) & 0b111111;
 190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 194:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 198:	0e 94 74 00 	call	0xe8	; 0xe8 <bin_to_segs>
 19c:	28 b1       	in	r18, 0x08	; 8
 19e:	8f 73       	andi	r24, 0x3F	; 63
 1a0:	99 27       	eor	r25, r25
 1a2:	82 2b       	or	r24, r18
 1a4:	88 b9       	out	0x08, r24	; 8
		PORTB |= bin_to_segs(seg_bin) >> 4 & 0b0000100;
 1a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1ae:	0e 94 74 00 	call	0xe8	; 0xe8 <bin_to_segs>
 1b2:	25 b1       	in	r18, 0x05	; 5
 1b4:	95 95       	asr	r25
 1b6:	87 95       	ror	r24
 1b8:	95 95       	asr	r25
 1ba:	87 95       	ror	r24
 1bc:	95 95       	asr	r25
 1be:	87 95       	ror	r24
 1c0:	95 95       	asr	r25
 1c2:	87 95       	ror	r24
 1c4:	84 70       	andi	r24, 0x04	; 4
 1c6:	99 27       	eor	r25, r25
 1c8:	82 2b       	or	r24, r18
 1ca:	85 b9       	out	0x05, r24	; 5
 1cc:	e1 cf       	rjmp	.-62     	; 0x190 <main+0x32>

000001ce <__tablejump2__>:
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	05 90       	lpm	r0, Z+
 1d4:	f4 91       	lpm	r31, Z
 1d6:	e0 2d       	mov	r30, r0
 1d8:	09 94       	ijmp

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
