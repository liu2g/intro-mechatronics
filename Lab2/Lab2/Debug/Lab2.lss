
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000070b  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000660  00000000  00000000  00000a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002eb  00000000  00000000  000010bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000013ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036c  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d1  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001a75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_11>
  30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  58:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  5c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  60:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  68:	a6 00       	.word	0x00a6	; ????
  6a:	76 00       	.word	0x0076	; ????
  6c:	79 00       	.word	0x0079	; ????
  6e:	7c 00       	.word	0x007c	; ????
  70:	7f 00       	.word	0x007f	; ????
  72:	82 00       	.word	0x0082	; ????
  74:	85 00       	.word	0x0085	; ????
  76:	88 00       	.word	0x0088	; ????
  78:	8b 00       	.word	0x008b	; ????
  7a:	8e 00       	.word	0x008e	; ????
  7c:	91 00       	.word	0x0091	; ????
  7e:	94 00       	.word	0x0094	; ????
  80:	97 00       	.word	0x0097	; ????
  82:	9a 00       	.word	0x009a	; ????
  84:	9d 00       	.word	0x009d	; ????
  86:	a0 00       	.word	0x00a0	; ????

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_clear_bss>:
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
  9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
  9e:	a4 30       	cpi	r26, 0x04	; 4
  a0:	b2 07       	cpc	r27, r18
  a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
  a4:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  a8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <main>:
}

int main(void)
{
	//Pin config
	DDRD = 0;
  b0:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0b00000111;
  b2:	87 e0       	ldi	r24, 0x07	; 7
  b4:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00111111;
  b6:	8f e3       	ldi	r24, 0x3F	; 63
  b8:	87 b9       	out	0x07, r24	; 7
	

	//Timer and interrupt config
	cli();
  ba:	f8 94       	cli
	TCCR1A = (0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM10); //Timer1 CTC
  bc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(1<<CS12)|(0<<CS11)|(0<<CS10); //Timer1 scaled by 256
  c0:	8c e0       	ldi	r24, 0x0C	; 12
  c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = (0<<ICIE1)|(0<<OCIE1B)|(1<<OCIE1A)|(0<<TOIE1); //Enable match interrupt
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	//OCR1A = 62500; //1 sec
	//OCR1A = 15625; //250 ms
	//OCR1A = 6250;  //100 ms
	OCR1A = 1875; //30 ms
  cc:	83 e5       	ldi	r24, 0x53	; 83
  ce:	97 e0       	ldi	r25, 0x07	; 7
  d0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	sei(); //Enable global interrupt
  d8:	78 94       	sei
  da:	ff cf       	rjmp	.-2      	; 0xda <main+0x2a>

000000dc <bin_to_segs>:
    }
}

int bin_to_segs (int bin_value) //Converts 4 bit value from switches to 7 bit A-G segs
{
	switch (bin_value)
  dc:	80 31       	cpi	r24, 0x10	; 16
  de:	91 05       	cpc	r25, r1
  e0:	90 f5       	brcc	.+100    	; 0x146 <bin_to_segs+0x6a>
  e2:	fc 01       	movw	r30, r24
  e4:	ec 5c       	subi	r30, 0xCC	; 204
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__tablejump2__>
	{
		case 0x0:
			return 0b1111110;
			break;
		case 0x1:
			return 0b0110000;
  ec:	80 e3       	ldi	r24, 0x30	; 48
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	08 95       	ret
			break;
		case 0x2:
			return 0b1101101;
  f2:	8d e6       	ldi	r24, 0x6D	; 109
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	08 95       	ret
			break;
		case 0x3:
			return 0b1111001;
  f8:	89 e7       	ldi	r24, 0x79	; 121
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	08 95       	ret
			break;
		case 0x4:
			return 0b0110011;
  fe:	83 e3       	ldi	r24, 0x33	; 51
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	08 95       	ret
			break;
		case 0x5:
			return 0b1011011;
 104:	8b e5       	ldi	r24, 0x5B	; 91
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	08 95       	ret
			break;
		case 0x6:
			return 0b1011111;
 10a:	8f e5       	ldi	r24, 0x5F	; 95
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	08 95       	ret
			break;
		case 0x7:
			return 0b1110000;
 110:	80 e7       	ldi	r24, 0x70	; 112
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	08 95       	ret
			break;
		case 0x8:
			return 0b1111111;
 116:	8f e7       	ldi	r24, 0x7F	; 127
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	08 95       	ret
			break;
		case 0x9:
			return 0b1110011;
 11c:	83 e7       	ldi	r24, 0x73	; 115
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	08 95       	ret
			break;
		case 0xA:
			return 0b1110111;
 122:	87 e7       	ldi	r24, 0x77	; 119
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	08 95       	ret
			break;
		case 0xb:
			return 0b0011111;
 128:	8f e1       	ldi	r24, 0x1F	; 31
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	08 95       	ret
			break;
		case 0xC:
			return 0b1001110;
 12e:	8e e4       	ldi	r24, 0x4E	; 78
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	08 95       	ret
			break;
		case 0xd:
			return 0b0111101;
 134:	8d e3       	ldi	r24, 0x3D	; 61
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	08 95       	ret
			break;
		case 0xE:
			return 0b1001111;
 13a:	8f e4       	ldi	r24, 0x4F	; 79
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	08 95       	ret
			break;
		case 0xF:
			return 0b1000111;
 140:	87 e4       	ldi	r24, 0x47	; 71
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	08 95       	ret
			break;
		default:
			return 0b0000000;
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret
int bin_to_segs (int bin_value) //Converts 4 bit value from switches to 7 bit A-G segs
{
	switch (bin_value)
	{
		case 0x0:
			return 0b1111110;
 14c:	8e e7       	ldi	r24, 0x7E	; 126
 14e:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			return 0b0000000;
				
	}
 150:	08 95       	ret

00000152 <__vector_11>:
volatile int seg_bin; //7 bit var to store 7 seg on/off values
int bin_to_segs (int);

//Interrupt to toggle two 7 seg selects b/w 01 and 10
ISR(TIMER1_COMPA_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	if (seg_sel) {
 174:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 178:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 17c:	89 2b       	or	r24, r25
 17e:	79 f0       	breq	.+30     	; 0x19e <__vector_11+0x4c>
		PORTB |= (1 << PORTB0); //Deselect first 7 seg
 180:	28 9a       	sbi	0x05, 0	; 5
		PORTB &= ~(1 << PORTB1); //Select second 7 seg
 182:	29 98       	cbi	0x05, 1	; 5
		seg_bin = bin_to_segs( (~PIND) & 0b1111 );
 184:	89 b1       	in	r24, 0x09	; 9
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	80 95       	com	r24
 18a:	90 95       	com	r25
 18c:	8f 70       	andi	r24, 0x0F	; 15
 18e:	99 27       	eor	r25, r25
 190:	0e 94 6e 00 	call	0xdc	; 0xdc <bin_to_segs>
 194:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <seg_bin+0x1>
 198:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seg_bin>
 19c:	16 c0       	rjmp	.+44     	; 0x1ca <__vector_11+0x78>
		//PORTC = (~PIND) & 0b111111;
	}
	else {
		PORTB &= ~(1 << PORTB0); //Select first 7 seg
 19e:	28 98       	cbi	0x05, 0	; 5
		PORTB |= (1 << PORTB1); //Deselect second 7 seg
 1a0:	29 9a       	sbi	0x05, 1	; 5
		seg_bin = bin_to_segs( (~PIND >> 4) & 0b1111 );
 1a2:	89 b1       	in	r24, 0x09	; 9
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	80 95       	com	r24
 1a8:	90 95       	com	r25
 1aa:	95 95       	asr	r25
 1ac:	87 95       	ror	r24
 1ae:	95 95       	asr	r25
 1b0:	87 95       	ror	r24
 1b2:	95 95       	asr	r25
 1b4:	87 95       	ror	r24
 1b6:	95 95       	asr	r25
 1b8:	87 95       	ror	r24
 1ba:	8f 70       	andi	r24, 0x0F	; 15
 1bc:	99 27       	eor	r25, r25
 1be:	0e 94 6e 00 	call	0xdc	; 0xdc <bin_to_segs>
 1c2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <seg_bin+0x1>
 1c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seg_bin>
		//PORTC = (~PIND) & 0b111111;
	}
	
	//Turn on/off seg A
	if (seg_bin >> 6) PORTB |= (1 << PORTB2);
 1ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seg_bin>
 1ce:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <seg_bin+0x1>
 1d2:	08 2e       	mov	r0, r24
 1d4:	89 2f       	mov	r24, r25
 1d6:	00 0c       	add	r0, r0
 1d8:	88 1f       	adc	r24, r24
 1da:	99 0b       	sbc	r25, r25
 1dc:	00 0c       	add	r0, r0
 1de:	88 1f       	adc	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	89 2b       	or	r24, r25
 1e4:	11 f0       	breq	.+4      	; 0x1ea <__vector_11+0x98>
 1e6:	2a 9a       	sbi	0x05, 2	; 5
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <__vector_11+0x9a>
	else PORTB &= ~(1 << PORTB2);
 1ea:	2a 98       	cbi	0x05, 2	; 5
	
	//Turn on/off seg B-G
	PORTC = seg_bin & 0b111111;
 1ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seg_bin>
 1f0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <seg_bin+0x1>
 1f4:	8f 73       	andi	r24, 0x3F	; 63
 1f6:	88 b9       	out	0x08, r24	; 8
	
	//Toggle flag
	seg_sel ^= 1;
 1f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	82 27       	eor	r24, r18
 204:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 208:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	bf 91       	pop	r27
 212:	af 91       	pop	r26
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	7f 91       	pop	r23
 21a:	6f 91       	pop	r22
 21c:	5f 91       	pop	r21
 21e:	4f 91       	pop	r20
 220:	3f 91       	pop	r19
 222:	2f 91       	pop	r18
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__tablejump2__>:
 22e:	ee 0f       	add	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	05 90       	lpm	r0, Z+
 234:	f4 91       	lpm	r31, Z
 236:	e0 2d       	mov	r30, r0
 238:	09 94       	ijmp

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
