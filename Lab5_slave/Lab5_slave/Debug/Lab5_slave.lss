
Lab5_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000518  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000071a  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000651  00000000  00000000  00000cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037b  00000000  00000000  00001323  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  000016a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000385  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000148  00000000  00000000  00001ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001c21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_11>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_18>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	e2 01       	movw	r28, r4
  6a:	e7 01       	movw	r28, r14
  6c:	ed 01       	movw	r28, r26
  6e:	f3 01       	movw	r30, r6
  70:	f9 01       	movw	r30, r18
  72:	ff 01       	movw	r30, r30
  74:	05 02       	muls	r16, r21
  76:	0b 02       	muls	r16, r27
  78:	11 02       	muls	r17, r17
  7a:	16 02       	muls	r17, r22

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a6 30       	cpi	r26, 0x06	; 6
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
volatile uint8_t temp_score; 

int main(void)
{
	//Configure Pins
	DDRC = (1<<PORTC5)|(1<<PORTC4)|(1<<PORTC3)|(1<<PORTC2)|(1<<PORTC1)|(1<<PORTC0);
  a4:	8f e3       	ldi	r24, 0x3F	; 63
  a6:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<PORTD2)|(1<<PORTD3)|(1<<PORTD4)|(1<<PORTD6)|(1<<PORTD7);
  a8:	8c ed       	ldi	r24, 0xDC	; 220
  aa:	8a b9       	out	0x0a, r24	; 10
	//*****************************************************************************
	//Configure Timer 1
	//*****************************************************************************
	//Toggle OCCR1A on Compare, run in CTC (Clear Timer on Compare)
	TCCR1A = (0<<COM1A1)|(0<<COM1A0)|(0<<WGM11)|(0<<WGM10);
  ac:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	//CTC Mode, CLK/256  
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(1<<CS12)|(0<<CS11)|(0<<CS10);
  b0:	8c e0       	ldi	r24, 0x0C	; 12
  b2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = (1<<OCIE1A);
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	OCR1A = 62;//  (1s)*(16 Mhz/256)
  bc:	8e e3       	ldi	r24, 0x3E	; 62
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

	//*****************************************************************************
	//Configure USART
	//*****************************************************************************
	UCSR0A = (0<<U2X0)|(1<<MPCM0); //Normal speed, multi-processor mode
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<UCSZ02); //RX Complete Interrupt Enabled, Receiver Enabled
  ce:	84 e9       	ldi	r24, 0x94	; 148
  d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (0<<UMSEL00)|(0<<UMSEL01)|(0<<UPM00)|(0<<UPM01)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00); //Async, no parity, 1 stop bit, 9-bit size, 250k Baud
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	UBRR0L = 3;
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UBRR0H = 0;
  e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	
	

	//Enable all interrupts
	sei();
  e4:	78 94       	sei
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <main+0x42>

000000e8 <__vector_18>:
    {
        //Do Nothing
    }
}

ISR(USART_RX_vect){
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	3f 93       	push	r19
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
	if (RXB80 && UDR0 == 0x10) {
  fe:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 102:	80 31       	cpi	r24, 0x10	; 16
 104:	51 f4       	brne	.+20     	; 0x11a <__vector_18+0x32>
			UCSR0A &= ~(1<<MPCM0);
 106:	e0 ec       	ldi	r30, 0xC0	; 192
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8e 7f       	andi	r24, 0xFE	; 254
 10e:	80 83       	st	Z, r24
			packcount ++;		
 110:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <packcount>
 114:	8f 5f       	subi	r24, 0xFF	; 255
 116:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <packcount>
	}
	if (MPCM0 == 0) {
		switch (packcount) {
 11a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <packcount>
 11e:	83 30       	cpi	r24, 0x03	; 3
 120:	11 f1       	breq	.+68     	; 0x166 <__vector_18+0x7e>
 122:	28 f4       	brcc	.+10     	; 0x12e <__vector_18+0x46>
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	41 f0       	breq	.+16     	; 0x138 <__vector_18+0x50>
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	81 f0       	breq	.+32     	; 0x14c <__vector_18+0x64>
 12c:	47 c0       	rjmp	.+142    	; 0x1bc <__vector_18+0xd4>
 12e:	84 30       	cpi	r24, 0x04	; 4
 130:	21 f1       	breq	.+72     	; 0x17a <__vector_18+0x92>
 132:	85 30       	cpi	r24, 0x05	; 5
 134:	c1 f1       	breq	.+112    	; 0x1a6 <__vector_18+0xbe>
 136:	42 c0       	rjmp	.+132    	; 0x1bc <__vector_18+0xd4>
			case 1:
				if (UDR0 == 0x1) packcount++;
 138:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	f1 f5       	brne	.+124    	; 0x1bc <__vector_18+0xd4>
 140:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <packcount>
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <packcount>
 14a:	38 c0       	rjmp	.+112    	; 0x1bc <__vector_18+0xd4>
				break;
			case 2:
				score = UDR0; 
 14c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <score+0x1>
 156:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <score>
				packcount++;
 15a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <packcount>
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <packcount>
				break;
 164:	2b c0       	rjmp	.+86     	; 0x1bc <__vector_18+0xd4>
			case 3:
				if (UDR0 == 0x2) packcount++;
 166:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	39 f5       	brne	.+78     	; 0x1bc <__vector_18+0xd4>
 16e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <packcount>
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <packcount>
 178:	21 c0       	rjmp	.+66     	; 0x1bc <__vector_18+0xd4>
				break;
			case 4:
				score += UDR0 << 8;
 17a:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 17e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <score>
 182:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <score+0x1>
 186:	89 2f       	mov	r24, r25
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	98 2f       	mov	r25, r24
 18c:	88 27       	eor	r24, r24
 18e:	82 0f       	add	r24, r18
 190:	93 1f       	adc	r25, r19
 192:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <score+0x1>
 196:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <score>
				packcount ++;
 19a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <packcount>
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <packcount>
				break;
 1a4:	0b c0       	rjmp	.+22     	; 0x1bc <__vector_18+0xd4>
			case 5:
				if (UDR0 == 0xFF) {
 1a6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1aa:	8f 3f       	cpi	r24, 0xFF	; 255
 1ac:	39 f4       	brne	.+14     	; 0x1bc <__vector_18+0xd4>
					packcount = 0;
 1ae:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <packcount>
					UCSR0A |= (1<<MPCM0);
 1b2:	e0 ec       	ldi	r30, 0xC0	; 192
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	80 83       	st	Z, r24
				}
				break;
		}
	}
}
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	3f 91       	pop	r19
 1c6:	2f 91       	pop	r18
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	static uint8_t digit_index = 0;//Keep track of which digit is activated
	static uint8_t digit = 0;//Value to display for current digit


	PORTD = 0b10100011|(digit_index<<2);//Activate Appropriate Digit
 1f4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <digit_index.1624>
 1f8:	88 0f       	add	r24, r24
 1fa:	88 0f       	add	r24, r24
 1fc:	83 6a       	ori	r24, 0xA3	; 163
 1fe:	8b b9       	out	0x0b, r24	; 11
	
	switch (digit_index)//Calculate value to display for current digit
 200:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <digit_index.1624>
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	09 f4       	brne	.+2      	; 0x20a <__vector_11+0x38>
 208:	52 c0       	rjmp	.+164    	; 0x2ae <__vector_11+0xdc>
 20a:	38 f4       	brcc	.+14     	; 0x21a <__vector_11+0x48>
 20c:	88 23       	and	r24, r24
 20e:	09 f4       	brne	.+2      	; 0x212 <__vector_11+0x40>
 210:	b2 c0       	rjmp	.+356    	; 0x376 <__vector_11+0x1a4>
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	09 f4       	brne	.+2      	; 0x218 <__vector_11+0x46>
 216:	7a c0       	rjmp	.+244    	; 0x30c <__vector_11+0x13a>
 218:	c5 c0       	rjmp	.+394    	; 0x3a4 <__vector_11+0x1d2>
 21a:	83 30       	cpi	r24, 0x03	; 3
 21c:	11 f1       	breq	.+68     	; 0x262 <__vector_11+0x90>
 21e:	84 30       	cpi	r24, 0x04	; 4
 220:	09 f0       	breq	.+2      	; 0x224 <__vector_11+0x52>
 222:	c0 c0       	rjmp	.+384    	; 0x3a4 <__vector_11+0x1d2>
	{
		case 4:
			digit = score % 10; break;//Ones
 224:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <score>
 228:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <score+0x1>
 22c:	9a 01       	movw	r18, r20
 22e:	ad ec       	ldi	r26, 0xCD	; 205
 230:	bc ec       	ldi	r27, 0xCC	; 204
 232:	0e 94 41 02 	call	0x482	; 0x482 <__umulhisi3>
 236:	96 95       	lsr	r25
 238:	87 95       	ror	r24
 23a:	96 95       	lsr	r25
 23c:	87 95       	ror	r24
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	9c 01       	movw	r18, r24
 244:	22 0f       	add	r18, r18
 246:	33 1f       	adc	r19, r19
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	82 0f       	add	r24, r18
 256:	93 1f       	adc	r25, r19
 258:	48 1b       	sub	r20, r24
 25a:	59 0b       	sbc	r21, r25
 25c:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <_edata>
 260:	a4 c0       	rjmp	.+328    	; 0x3aa <__vector_11+0x1d8>
		case 3:
			digit = (score % 100)/10; break;//Tens
 262:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <score>
 266:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <score+0x1>
 26a:	9a 01       	movw	r18, r20
 26c:	36 95       	lsr	r19
 26e:	27 95       	ror	r18
 270:	36 95       	lsr	r19
 272:	27 95       	ror	r18
 274:	ab e7       	ldi	r26, 0x7B	; 123
 276:	b4 e1       	ldi	r27, 0x14	; 20
 278:	0e 94 41 02 	call	0x482	; 0x482 <__umulhisi3>
 27c:	96 95       	lsr	r25
 27e:	87 95       	ror	r24
 280:	64 e6       	ldi	r22, 0x64	; 100
 282:	68 9f       	mul	r22, r24
 284:	90 01       	movw	r18, r0
 286:	69 9f       	mul	r22, r25
 288:	30 0d       	add	r19, r0
 28a:	11 24       	eor	r1, r1
 28c:	ca 01       	movw	r24, r20
 28e:	82 1b       	sub	r24, r18
 290:	93 0b       	sbc	r25, r19
 292:	9c 01       	movw	r18, r24
 294:	ad ec       	ldi	r26, 0xCD	; 205
 296:	bc ec       	ldi	r27, 0xCC	; 204
 298:	0e 94 41 02 	call	0x482	; 0x482 <__umulhisi3>
 29c:	96 95       	lsr	r25
 29e:	87 95       	ror	r24
 2a0:	96 95       	lsr	r25
 2a2:	87 95       	ror	r24
 2a4:	96 95       	lsr	r25
 2a6:	87 95       	ror	r24
 2a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2ac:	7e c0       	rjmp	.+252    	; 0x3aa <__vector_11+0x1d8>
		case 2:
			digit = (score %1000)/100; break;//Hundreds
 2ae:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <score>
 2b2:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <score+0x1>
 2b6:	9a 01       	movw	r18, r20
 2b8:	36 95       	lsr	r19
 2ba:	27 95       	ror	r18
 2bc:	36 95       	lsr	r19
 2be:	27 95       	ror	r18
 2c0:	36 95       	lsr	r19
 2c2:	27 95       	ror	r18
 2c4:	a5 ec       	ldi	r26, 0xC5	; 197
 2c6:	b0 e2       	ldi	r27, 0x20	; 32
 2c8:	0e 94 41 02 	call	0x482	; 0x482 <__umulhisi3>
 2cc:	92 95       	swap	r25
 2ce:	82 95       	swap	r24
 2d0:	8f 70       	andi	r24, 0x0F	; 15
 2d2:	89 27       	eor	r24, r25
 2d4:	9f 70       	andi	r25, 0x0F	; 15
 2d6:	89 27       	eor	r24, r25
 2d8:	68 ee       	ldi	r22, 0xE8	; 232
 2da:	73 e0       	ldi	r23, 0x03	; 3
 2dc:	86 9f       	mul	r24, r22
 2de:	90 01       	movw	r18, r0
 2e0:	87 9f       	mul	r24, r23
 2e2:	30 0d       	add	r19, r0
 2e4:	96 9f       	mul	r25, r22
 2e6:	30 0d       	add	r19, r0
 2e8:	11 24       	eor	r1, r1
 2ea:	ca 01       	movw	r24, r20
 2ec:	82 1b       	sub	r24, r18
 2ee:	93 0b       	sbc	r25, r19
 2f0:	9c 01       	movw	r18, r24
 2f2:	36 95       	lsr	r19
 2f4:	27 95       	ror	r18
 2f6:	36 95       	lsr	r19
 2f8:	27 95       	ror	r18
 2fa:	ab e7       	ldi	r26, 0x7B	; 123
 2fc:	b4 e1       	ldi	r27, 0x14	; 20
 2fe:	0e 94 41 02 	call	0x482	; 0x482 <__umulhisi3>
 302:	96 95       	lsr	r25
 304:	87 95       	ror	r24
 306:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 30a:	4f c0       	rjmp	.+158    	; 0x3aa <__vector_11+0x1d8>
		case 1:
			digit = (score %10000)/1000; break;//Thousands
 30c:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <score>
 310:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <score+0x1>
 314:	9a 01       	movw	r18, r20
 316:	32 95       	swap	r19
 318:	22 95       	swap	r18
 31a:	2f 70       	andi	r18, 0x0F	; 15
 31c:	23 27       	eor	r18, r19
 31e:	3f 70       	andi	r19, 0x0F	; 15
 320:	23 27       	eor	r18, r19
 322:	a7 e4       	ldi	r26, 0x47	; 71
 324:	b3 e0       	ldi	r27, 0x03	; 3
 326:	0e 94 41 02 	call	0x482	; 0x482 <__umulhisi3>
 32a:	96 95       	lsr	r25
 32c:	87 95       	ror	r24
 32e:	96 95       	lsr	r25
 330:	87 95       	ror	r24
 332:	96 95       	lsr	r25
 334:	87 95       	ror	r24
 336:	60 e1       	ldi	r22, 0x10	; 16
 338:	77 e2       	ldi	r23, 0x27	; 39
 33a:	86 9f       	mul	r24, r22
 33c:	90 01       	movw	r18, r0
 33e:	87 9f       	mul	r24, r23
 340:	30 0d       	add	r19, r0
 342:	96 9f       	mul	r25, r22
 344:	30 0d       	add	r19, r0
 346:	11 24       	eor	r1, r1
 348:	ca 01       	movw	r24, r20
 34a:	82 1b       	sub	r24, r18
 34c:	93 0b       	sbc	r25, r19
 34e:	9c 01       	movw	r18, r24
 350:	36 95       	lsr	r19
 352:	27 95       	ror	r18
 354:	36 95       	lsr	r19
 356:	27 95       	ror	r18
 358:	36 95       	lsr	r19
 35a:	27 95       	ror	r18
 35c:	a5 ec       	ldi	r26, 0xC5	; 197
 35e:	b0 e2       	ldi	r27, 0x20	; 32
 360:	0e 94 41 02 	call	0x482	; 0x482 <__umulhisi3>
 364:	92 95       	swap	r25
 366:	82 95       	swap	r24
 368:	8f 70       	andi	r24, 0x0F	; 15
 36a:	89 27       	eor	r24, r25
 36c:	9f 70       	andi	r25, 0x0F	; 15
 36e:	89 27       	eor	r24, r25
 370:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 374:	1a c0       	rjmp	.+52     	; 0x3aa <__vector_11+0x1d8>
		case 0:
			digit = score/10000; break;//Ten Thousands
 376:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <score>
 37a:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <score+0x1>
 37e:	32 95       	swap	r19
 380:	22 95       	swap	r18
 382:	2f 70       	andi	r18, 0x0F	; 15
 384:	23 27       	eor	r18, r19
 386:	3f 70       	andi	r19, 0x0F	; 15
 388:	23 27       	eor	r18, r19
 38a:	a7 e4       	ldi	r26, 0x47	; 71
 38c:	b3 e0       	ldi	r27, 0x03	; 3
 38e:	0e 94 41 02 	call	0x482	; 0x482 <__umulhisi3>
 392:	96 95       	lsr	r25
 394:	87 95       	ror	r24
 396:	96 95       	lsr	r25
 398:	87 95       	ror	r24
 39a:	96 95       	lsr	r25
 39c:	87 95       	ror	r24
 39e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 3a2:	03 c0       	rjmp	.+6      	; 0x3aa <__vector_11+0x1d8>
		default:
			digit = 0;	
 3a4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 3a8:	0d c0       	rjmp	.+26     	; 0x3c4 <__vector_11+0x1f2>
			
	}
	
	switch (digit)//Display character for current digit
 3aa:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 3ae:	8e 2f       	mov	r24, r30
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	8a 30       	cpi	r24, 0x0A	; 10
 3b4:	91 05       	cpc	r25, r1
 3b6:	08 f0       	brcs	.+2      	; 0x3ba <__vector_11+0x1e8>
 3b8:	3f c0       	rjmp	.+126    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3ba:	fc 01       	movw	r30, r24
 3bc:	ec 5c       	subi	r30, 0xCC	; 204
 3be:	ff 4f       	sbci	r31, 0xFF	; 255
 3c0:	0c 94 3b 02 	jmp	0x476	; 0x476 <__tablejump2__>
	{
		case 0:
				PORTD = (PORTD&0x7F)|0x00;
 3c4:	5f 98       	cbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x3F; break;
 3c6:	88 b1       	in	r24, 0x08	; 8
 3c8:	8f 63       	ori	r24, 0x3F	; 63
 3ca:	88 b9       	out	0x08, r24	; 8
 3cc:	39 c0       	rjmp	.+114    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		case 1:
				PORTD = (PORTD&0x7F)|0x00;
 3ce:	5f 98       	cbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x06; break;
 3d0:	88 b1       	in	r24, 0x08	; 8
 3d2:	80 7c       	andi	r24, 0xC0	; 192
 3d4:	86 60       	ori	r24, 0x06	; 6
 3d6:	88 b9       	out	0x08, r24	; 8
 3d8:	33 c0       	rjmp	.+102    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		case 2:
				PORTD = (PORTD&0x7F)|0x80;
 3da:	5f 9a       	sbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x1B; break;
 3dc:	88 b1       	in	r24, 0x08	; 8
 3de:	80 7c       	andi	r24, 0xC0	; 192
 3e0:	8b 61       	ori	r24, 0x1B	; 27
 3e2:	88 b9       	out	0x08, r24	; 8
 3e4:	2d c0       	rjmp	.+90     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		case 3:
				PORTD = (PORTD&0x7F)|0x80;
 3e6:	5f 9a       	sbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x0F; break;
 3e8:	88 b1       	in	r24, 0x08	; 8
 3ea:	80 7c       	andi	r24, 0xC0	; 192
 3ec:	8f 60       	ori	r24, 0x0F	; 15
 3ee:	88 b9       	out	0x08, r24	; 8
 3f0:	27 c0       	rjmp	.+78     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		case 4:
				PORTD = (PORTD&0x7F)|0x80;
 3f2:	5f 9a       	sbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x26; break;
 3f4:	88 b1       	in	r24, 0x08	; 8
 3f6:	80 7c       	andi	r24, 0xC0	; 192
 3f8:	86 62       	ori	r24, 0x26	; 38
 3fa:	88 b9       	out	0x08, r24	; 8
 3fc:	21 c0       	rjmp	.+66     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		case 5:
				PORTD = (PORTD&0x7F)|0x80;
 3fe:	5f 9a       	sbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x2D; break;
 400:	88 b1       	in	r24, 0x08	; 8
 402:	80 7c       	andi	r24, 0xC0	; 192
 404:	8d 62       	ori	r24, 0x2D	; 45
 406:	88 b9       	out	0x08, r24	; 8
 408:	1b c0       	rjmp	.+54     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		case 6:
				PORTD = (PORTD&0x7F)|0x80;
 40a:	5f 9a       	sbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x3D; break;
 40c:	88 b1       	in	r24, 0x08	; 8
 40e:	80 7c       	andi	r24, 0xC0	; 192
 410:	8d 63       	ori	r24, 0x3D	; 61
 412:	88 b9       	out	0x08, r24	; 8
 414:	15 c0       	rjmp	.+42     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		case 7:
				PORTD = (PORTD&0x7F)|0x00;
 416:	5f 98       	cbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x07; break;
 418:	88 b1       	in	r24, 0x08	; 8
 41a:	80 7c       	andi	r24, 0xC0	; 192
 41c:	87 60       	ori	r24, 0x07	; 7
 41e:	88 b9       	out	0x08, r24	; 8
 420:	0f c0       	rjmp	.+30     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		case 8:
				PORTD = (PORTD&0x7F)|0x80;;
 422:	5f 9a       	sbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x3F; break;
 424:	88 b1       	in	r24, 0x08	; 8
 426:	8f 63       	ori	r24, 0x3F	; 63
 428:	88 b9       	out	0x08, r24	; 8
 42a:	0a c0       	rjmp	.+20     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		case 9:
				PORTD = (PORTD&0x7F)|0x80;
 42c:	5f 9a       	sbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x27; break;
 42e:	88 b1       	in	r24, 0x08	; 8
 430:	80 7c       	andi	r24, 0xC0	; 192
 432:	87 62       	ori	r24, 0x27	; 39
 434:	88 b9       	out	0x08, r24	; 8
 436:	04 c0       	rjmp	.+8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		default:
				PORTD = (PORTD&0x7F);
 438:	5f 98       	cbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x3F; break;
 43a:	88 b1       	in	r24, 0x08	; 8
 43c:	8f 63       	ori	r24, 0x3F	; 63
 43e:	88 b9       	out	0x08, r24	; 8
	}
	
	//Updated digit_index for next digit
	if(digit_index++>3){
 440:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <digit_index.1624>
 444:	84 30       	cpi	r24, 0x04	; 4
 446:	20 f4       	brcc	.+8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 448:	8f 5f       	subi	r24, 0xFF	; 255
 44a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <digit_index.1624>
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		digit_index=0;}
 450:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <digit_index.1624>
	
 454:	ff 91       	pop	r31
 456:	ef 91       	pop	r30
 458:	bf 91       	pop	r27
 45a:	af 91       	pop	r26
 45c:	9f 91       	pop	r25
 45e:	8f 91       	pop	r24
 460:	7f 91       	pop	r23
 462:	6f 91       	pop	r22
 464:	5f 91       	pop	r21
 466:	4f 91       	pop	r20
 468:	3f 91       	pop	r19
 46a:	2f 91       	pop	r18
 46c:	0f 90       	pop	r0
 46e:	0f be       	out	0x3f, r0	; 63
 470:	0f 90       	pop	r0
 472:	1f 90       	pop	r1
 474:	18 95       	reti

00000476 <__tablejump2__>:
 476:	ee 0f       	add	r30, r30
 478:	ff 1f       	adc	r31, r31
 47a:	05 90       	lpm	r0, Z+
 47c:	f4 91       	lpm	r31, Z
 47e:	e0 2d       	mov	r30, r0
 480:	09 94       	ijmp

00000482 <__umulhisi3>:
 482:	a2 9f       	mul	r26, r18
 484:	b0 01       	movw	r22, r0
 486:	b3 9f       	mul	r27, r19
 488:	c0 01       	movw	r24, r0
 48a:	a3 9f       	mul	r26, r19
 48c:	70 0d       	add	r23, r0
 48e:	81 1d       	adc	r24, r1
 490:	11 24       	eor	r1, r1
 492:	91 1d       	adc	r25, r1
 494:	b2 9f       	mul	r27, r18
 496:	70 0d       	add	r23, r0
 498:	81 1d       	adc	r24, r1
 49a:	11 24       	eor	r1, r1
 49c:	91 1d       	adc	r25, r1
 49e:	08 95       	ret

000004a0 <_exit>:
 4a0:	f8 94       	cli

000004a2 <__stop_program>:
 4a2:	ff cf       	rjmp	.-2      	; 0x4a2 <__stop_program>
