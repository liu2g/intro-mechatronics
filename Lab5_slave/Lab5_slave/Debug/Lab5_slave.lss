
Lab5_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000406  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  0000047a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000708  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000651  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000327  00000000  00000000  00001275  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000380  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000121  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001ae5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_11>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_18>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	93 01       	movw	r18, r6
  6a:	98 01       	movw	r18, r16
  6c:	9e 01       	movw	r18, r28
  6e:	a4 01       	movw	r20, r8
  70:	aa 01       	movw	r20, r20
  72:	b0 01       	movw	r22, r0
  74:	b6 01       	movw	r22, r12
  76:	bc 01       	movw	r22, r24
  78:	c2 01       	movw	r24, r4
  7a:	c7 01       	movw	r24, r14

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a5 30       	cpi	r26, 0x05	; 5
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 01 02 	jmp	0x402	; 0x402 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
volatile uint8_t packcount; //Counter of UART packet 

int main(void)
{
	//Configure Pins
	DDRC = (1<<PORTC5)|(1<<PORTC4)|(1<<PORTC3)|(1<<PORTC2)|(1<<PORTC1)|(1<<PORTC0);
  a4:	8f e3       	ldi	r24, 0x3F	; 63
  a6:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<PORTD2)|(1<<PORTD3)|(1<<PORTD4)|(1<<PORTD6)|(1<<PORTD7);
  a8:	8c ed       	ldi	r24, 0xDC	; 220
  aa:	8a b9       	out	0x0a, r24	; 10
	//*****************************************************************************
	//Configure Timer 1
	//*****************************************************************************
	//Toggle OCCR1A on Compare, run in CTC (Clear Timer on Compare)
	TCCR1A = (0<<COM1A1)|(0<<COM1A0)|(0<<WGM11)|(0<<WGM10);
  ac:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	//CTC Mode, CLK/256  
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(1<<CS12)|(0<<CS11)|(0<<CS10);
  b0:	8c e0       	ldi	r24, 0x0C	; 12
  b2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = (1<<OCIE1A);
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	OCR1A = 62;//  (1s)*(16 Mhz/256)
  bc:	8e e3       	ldi	r24, 0x3E	; 62
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

	//*****************************************************************************
	//Configure USART
	//*****************************************************************************
	UCSR0A = (0<<U2X0)|(1<<MPCM0); //Normal speed, multi-processor mode
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<UCSZ02); //RX Complete Interrupt Enabled, Receiver Enabled
  ce:	84 e9       	ldi	r24, 0x94	; 148
  d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (0<<UMSEL00)|(0<<UMSEL01)|(0<<UPM00)|(0<<UPM01)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00); //Async, no parity, 1 stop bit, 9-bit size, 250k Baud
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	UBRR0L = 3;
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UBRR0H = 0;
  e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	
	

	//Enable all interrupts
	sei();
  e4:	78 94       	sei
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <main+0x42>

000000e8 <__vector_18>:
    {
        //Do Nothing
    }
}

ISR(USART_RX_vect){
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	8f 93       	push	r24
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
	if (RXB80) {
		if (UDR0 == 0x10){
  f8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  fc:	80 31       	cpi	r24, 0x10	; 16
  fe:	59 f4       	brne	.+22     	; 0x116 <__vector_18+0x2e>
			UCSR0A &= ~(1<<MPCM0);
 100:	e0 ec       	ldi	r30, 0xC0	; 192
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	8e 7f       	andi	r24, 0xFE	; 254
 108:	80 83       	st	Z, r24
			packcount ++;
 10a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <packcount>
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <packcount>
 114:	07 c0       	rjmp	.+14     	; 0x124 <__vector_18+0x3c>
		}
		else {
			UCSR0A |= (1<<MPCM0);
 116:	e0 ec       	ldi	r30, 0xC0	; 192
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	80 83       	st	Z, r24
			packcount = 0;
 120:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <packcount>
					UCSR0A |= (1<<MPCM0);
				}
				break;
		}
	}
}
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
	static uint8_t digit_index = 0;//Keep track of which digit is activated
	static uint8_t digit = 0;//Value to display for current digit


	PORTD = 0b10100011|(digit_index<<2);//Activate Appropriate Digit
 156:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <digit_index.1623>
 15a:	88 0f       	add	r24, r24
 15c:	88 0f       	add	r24, r24
 15e:	83 6a       	ori	r24, 0xA3	; 163
 160:	8b b9       	out	0x0b, r24	; 11
	
	switch (digit_index)//Calculate value to display for current digit
 162:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <digit_index.1623>
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	09 f4       	brne	.+2      	; 0x16c <__vector_11+0x38>
 16a:	52 c0       	rjmp	.+164    	; 0x210 <__vector_11+0xdc>
 16c:	38 f4       	brcc	.+14     	; 0x17c <__vector_11+0x48>
 16e:	88 23       	and	r24, r24
 170:	09 f4       	brne	.+2      	; 0x174 <__vector_11+0x40>
 172:	b2 c0       	rjmp	.+356    	; 0x2d8 <__vector_11+0x1a4>
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	09 f4       	brne	.+2      	; 0x17a <__vector_11+0x46>
 178:	7a c0       	rjmp	.+244    	; 0x26e <__vector_11+0x13a>
 17a:	c5 c0       	rjmp	.+394    	; 0x306 <__vector_11+0x1d2>
 17c:	83 30       	cpi	r24, 0x03	; 3
 17e:	11 f1       	breq	.+68     	; 0x1c4 <__vector_11+0x90>
 180:	84 30       	cpi	r24, 0x04	; 4
 182:	09 f0       	breq	.+2      	; 0x186 <__vector_11+0x52>
 184:	c0 c0       	rjmp	.+384    	; 0x306 <__vector_11+0x1d2>
	{
		case 4:
			digit = score % 10; break;//Ones
 186:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <score>
 18a:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <score+0x1>
 18e:	9a 01       	movw	r18, r20
 190:	ad ec       	ldi	r26, 0xCD	; 205
 192:	bc ec       	ldi	r27, 0xCC	; 204
 194:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__umulhisi3>
 198:	96 95       	lsr	r25
 19a:	87 95       	ror	r24
 19c:	96 95       	lsr	r25
 19e:	87 95       	ror	r24
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
 1a4:	9c 01       	movw	r18, r24
 1a6:	22 0f       	add	r18, r18
 1a8:	33 1f       	adc	r19, r19
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	82 0f       	add	r24, r18
 1b8:	93 1f       	adc	r25, r19
 1ba:	48 1b       	sub	r20, r24
 1bc:	59 0b       	sbc	r21, r25
 1be:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <_edata>
 1c2:	a4 c0       	rjmp	.+328    	; 0x30c <__vector_11+0x1d8>
		case 3:
			digit = (score % 100)/10; break;//Tens
 1c4:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <score>
 1c8:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <score+0x1>
 1cc:	9a 01       	movw	r18, r20
 1ce:	36 95       	lsr	r19
 1d0:	27 95       	ror	r18
 1d2:	36 95       	lsr	r19
 1d4:	27 95       	ror	r18
 1d6:	ab e7       	ldi	r26, 0x7B	; 123
 1d8:	b4 e1       	ldi	r27, 0x14	; 20
 1da:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__umulhisi3>
 1de:	96 95       	lsr	r25
 1e0:	87 95       	ror	r24
 1e2:	64 e6       	ldi	r22, 0x64	; 100
 1e4:	68 9f       	mul	r22, r24
 1e6:	90 01       	movw	r18, r0
 1e8:	69 9f       	mul	r22, r25
 1ea:	30 0d       	add	r19, r0
 1ec:	11 24       	eor	r1, r1
 1ee:	ca 01       	movw	r24, r20
 1f0:	82 1b       	sub	r24, r18
 1f2:	93 0b       	sbc	r25, r19
 1f4:	9c 01       	movw	r18, r24
 1f6:	ad ec       	ldi	r26, 0xCD	; 205
 1f8:	bc ec       	ldi	r27, 0xCC	; 204
 1fa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__umulhisi3>
 1fe:	96 95       	lsr	r25
 200:	87 95       	ror	r24
 202:	96 95       	lsr	r25
 204:	87 95       	ror	r24
 206:	96 95       	lsr	r25
 208:	87 95       	ror	r24
 20a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 20e:	7e c0       	rjmp	.+252    	; 0x30c <__vector_11+0x1d8>
		case 2:
			digit = (score %1000)/100; break;//Hundreds
 210:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <score>
 214:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <score+0x1>
 218:	9a 01       	movw	r18, r20
 21a:	36 95       	lsr	r19
 21c:	27 95       	ror	r18
 21e:	36 95       	lsr	r19
 220:	27 95       	ror	r18
 222:	36 95       	lsr	r19
 224:	27 95       	ror	r18
 226:	a5 ec       	ldi	r26, 0xC5	; 197
 228:	b0 e2       	ldi	r27, 0x20	; 32
 22a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__umulhisi3>
 22e:	92 95       	swap	r25
 230:	82 95       	swap	r24
 232:	8f 70       	andi	r24, 0x0F	; 15
 234:	89 27       	eor	r24, r25
 236:	9f 70       	andi	r25, 0x0F	; 15
 238:	89 27       	eor	r24, r25
 23a:	68 ee       	ldi	r22, 0xE8	; 232
 23c:	73 e0       	ldi	r23, 0x03	; 3
 23e:	86 9f       	mul	r24, r22
 240:	90 01       	movw	r18, r0
 242:	87 9f       	mul	r24, r23
 244:	30 0d       	add	r19, r0
 246:	96 9f       	mul	r25, r22
 248:	30 0d       	add	r19, r0
 24a:	11 24       	eor	r1, r1
 24c:	ca 01       	movw	r24, r20
 24e:	82 1b       	sub	r24, r18
 250:	93 0b       	sbc	r25, r19
 252:	9c 01       	movw	r18, r24
 254:	36 95       	lsr	r19
 256:	27 95       	ror	r18
 258:	36 95       	lsr	r19
 25a:	27 95       	ror	r18
 25c:	ab e7       	ldi	r26, 0x7B	; 123
 25e:	b4 e1       	ldi	r27, 0x14	; 20
 260:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__umulhisi3>
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 26c:	4f c0       	rjmp	.+158    	; 0x30c <__vector_11+0x1d8>
		case 1:
			digit = (score %10000)/1000; break;//Thousands
 26e:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <score>
 272:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <score+0x1>
 276:	9a 01       	movw	r18, r20
 278:	32 95       	swap	r19
 27a:	22 95       	swap	r18
 27c:	2f 70       	andi	r18, 0x0F	; 15
 27e:	23 27       	eor	r18, r19
 280:	3f 70       	andi	r19, 0x0F	; 15
 282:	23 27       	eor	r18, r19
 284:	a7 e4       	ldi	r26, 0x47	; 71
 286:	b3 e0       	ldi	r27, 0x03	; 3
 288:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__umulhisi3>
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	96 95       	lsr	r25
 292:	87 95       	ror	r24
 294:	96 95       	lsr	r25
 296:	87 95       	ror	r24
 298:	60 e1       	ldi	r22, 0x10	; 16
 29a:	77 e2       	ldi	r23, 0x27	; 39
 29c:	86 9f       	mul	r24, r22
 29e:	90 01       	movw	r18, r0
 2a0:	87 9f       	mul	r24, r23
 2a2:	30 0d       	add	r19, r0
 2a4:	96 9f       	mul	r25, r22
 2a6:	30 0d       	add	r19, r0
 2a8:	11 24       	eor	r1, r1
 2aa:	ca 01       	movw	r24, r20
 2ac:	82 1b       	sub	r24, r18
 2ae:	93 0b       	sbc	r25, r19
 2b0:	9c 01       	movw	r18, r24
 2b2:	36 95       	lsr	r19
 2b4:	27 95       	ror	r18
 2b6:	36 95       	lsr	r19
 2b8:	27 95       	ror	r18
 2ba:	36 95       	lsr	r19
 2bc:	27 95       	ror	r18
 2be:	a5 ec       	ldi	r26, 0xC5	; 197
 2c0:	b0 e2       	ldi	r27, 0x20	; 32
 2c2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__umulhisi3>
 2c6:	92 95       	swap	r25
 2c8:	82 95       	swap	r24
 2ca:	8f 70       	andi	r24, 0x0F	; 15
 2cc:	89 27       	eor	r24, r25
 2ce:	9f 70       	andi	r25, 0x0F	; 15
 2d0:	89 27       	eor	r24, r25
 2d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2d6:	1a c0       	rjmp	.+52     	; 0x30c <__vector_11+0x1d8>
		case 0:
			digit = score/10000; break;//Ten Thousands
 2d8:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <score>
 2dc:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <score+0x1>
 2e0:	32 95       	swap	r19
 2e2:	22 95       	swap	r18
 2e4:	2f 70       	andi	r18, 0x0F	; 15
 2e6:	23 27       	eor	r18, r19
 2e8:	3f 70       	andi	r19, 0x0F	; 15
 2ea:	23 27       	eor	r18, r19
 2ec:	a7 e4       	ldi	r26, 0x47	; 71
 2ee:	b3 e0       	ldi	r27, 0x03	; 3
 2f0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__umulhisi3>
 2f4:	96 95       	lsr	r25
 2f6:	87 95       	ror	r24
 2f8:	96 95       	lsr	r25
 2fa:	87 95       	ror	r24
 2fc:	96 95       	lsr	r25
 2fe:	87 95       	ror	r24
 300:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 304:	03 c0       	rjmp	.+6      	; 0x30c <__vector_11+0x1d8>
		default:
			digit = 0;	
 306:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 30a:	0d c0       	rjmp	.+26     	; 0x326 <__vector_11+0x1f2>
			
	}
	
	switch (digit)//Display character for current digit
 30c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 310:	8e 2f       	mov	r24, r30
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	8a 30       	cpi	r24, 0x0A	; 10
 316:	91 05       	cpc	r25, r1
 318:	08 f0       	brcs	.+2      	; 0x31c <__vector_11+0x1e8>
 31a:	3f c0       	rjmp	.+126    	; 0x39a <__vector_11+0x266>
 31c:	fc 01       	movw	r30, r24
 31e:	ec 5c       	subi	r30, 0xCC	; 204
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__tablejump2__>
	{
		case 0:
				PORTD = (PORTD&0x7F)|0x00;
 326:	5f 98       	cbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x3F; break;
 328:	88 b1       	in	r24, 0x08	; 8
 32a:	8f 63       	ori	r24, 0x3F	; 63
 32c:	88 b9       	out	0x08, r24	; 8
 32e:	39 c0       	rjmp	.+114    	; 0x3a2 <__vector_11+0x26e>
		case 1:
				PORTD = (PORTD&0x7F)|0x00;
 330:	5f 98       	cbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x06; break;
 332:	88 b1       	in	r24, 0x08	; 8
 334:	80 7c       	andi	r24, 0xC0	; 192
 336:	86 60       	ori	r24, 0x06	; 6
 338:	88 b9       	out	0x08, r24	; 8
 33a:	33 c0       	rjmp	.+102    	; 0x3a2 <__vector_11+0x26e>
		case 2:
				PORTD = (PORTD&0x7F)|0x80;
 33c:	5f 9a       	sbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x1B; break;
 33e:	88 b1       	in	r24, 0x08	; 8
 340:	80 7c       	andi	r24, 0xC0	; 192
 342:	8b 61       	ori	r24, 0x1B	; 27
 344:	88 b9       	out	0x08, r24	; 8
 346:	2d c0       	rjmp	.+90     	; 0x3a2 <__vector_11+0x26e>
		case 3:
				PORTD = (PORTD&0x7F)|0x80;
 348:	5f 9a       	sbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x0F; break;
 34a:	88 b1       	in	r24, 0x08	; 8
 34c:	80 7c       	andi	r24, 0xC0	; 192
 34e:	8f 60       	ori	r24, 0x0F	; 15
 350:	88 b9       	out	0x08, r24	; 8
 352:	27 c0       	rjmp	.+78     	; 0x3a2 <__vector_11+0x26e>
		case 4:
				PORTD = (PORTD&0x7F)|0x80;
 354:	5f 9a       	sbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x26; break;
 356:	88 b1       	in	r24, 0x08	; 8
 358:	80 7c       	andi	r24, 0xC0	; 192
 35a:	86 62       	ori	r24, 0x26	; 38
 35c:	88 b9       	out	0x08, r24	; 8
 35e:	21 c0       	rjmp	.+66     	; 0x3a2 <__vector_11+0x26e>
		case 5:
				PORTD = (PORTD&0x7F)|0x80;
 360:	5f 9a       	sbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x2D; break;
 362:	88 b1       	in	r24, 0x08	; 8
 364:	80 7c       	andi	r24, 0xC0	; 192
 366:	8d 62       	ori	r24, 0x2D	; 45
 368:	88 b9       	out	0x08, r24	; 8
 36a:	1b c0       	rjmp	.+54     	; 0x3a2 <__vector_11+0x26e>
		case 6:
				PORTD = (PORTD&0x7F)|0x80;
 36c:	5f 9a       	sbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x3D; break;
 36e:	88 b1       	in	r24, 0x08	; 8
 370:	80 7c       	andi	r24, 0xC0	; 192
 372:	8d 63       	ori	r24, 0x3D	; 61
 374:	88 b9       	out	0x08, r24	; 8
 376:	15 c0       	rjmp	.+42     	; 0x3a2 <__vector_11+0x26e>
		case 7:
				PORTD = (PORTD&0x7F)|0x00;
 378:	5f 98       	cbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x07; break;
 37a:	88 b1       	in	r24, 0x08	; 8
 37c:	80 7c       	andi	r24, 0xC0	; 192
 37e:	87 60       	ori	r24, 0x07	; 7
 380:	88 b9       	out	0x08, r24	; 8
 382:	0f c0       	rjmp	.+30     	; 0x3a2 <__vector_11+0x26e>
		case 8:
				PORTD = (PORTD&0x7F)|0x80;;
 384:	5f 9a       	sbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x3F; break;
 386:	88 b1       	in	r24, 0x08	; 8
 388:	8f 63       	ori	r24, 0x3F	; 63
 38a:	88 b9       	out	0x08, r24	; 8
 38c:	0a c0       	rjmp	.+20     	; 0x3a2 <__vector_11+0x26e>
		case 9:
				PORTD = (PORTD&0x7F)|0x80;
 38e:	5f 9a       	sbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x27; break;
 390:	88 b1       	in	r24, 0x08	; 8
 392:	80 7c       	andi	r24, 0xC0	; 192
 394:	87 62       	ori	r24, 0x27	; 39
 396:	88 b9       	out	0x08, r24	; 8
 398:	04 c0       	rjmp	.+8      	; 0x3a2 <__vector_11+0x26e>
		default:
				PORTD = (PORTD&0x7F);
 39a:	5f 98       	cbi	0x0b, 7	; 11
				PORTC = (PORTC&0xC0)|0x3F; break;
 39c:	88 b1       	in	r24, 0x08	; 8
 39e:	8f 63       	ori	r24, 0x3F	; 63
 3a0:	88 b9       	out	0x08, r24	; 8
	}
	
	//Updated digit_index for next digit
	if(digit_index++>3){
 3a2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <digit_index.1623>
 3a6:	84 30       	cpi	r24, 0x04	; 4
 3a8:	20 f4       	brcc	.+8      	; 0x3b2 <__vector_11+0x27e>
 3aa:	8f 5f       	subi	r24, 0xFF	; 255
 3ac:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <digit_index.1623>
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <__vector_11+0x282>
		digit_index=0;}
 3b2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <digit_index.1623>
	
 3b6:	ff 91       	pop	r31
 3b8:	ef 91       	pop	r30
 3ba:	bf 91       	pop	r27
 3bc:	af 91       	pop	r26
 3be:	9f 91       	pop	r25
 3c0:	8f 91       	pop	r24
 3c2:	7f 91       	pop	r23
 3c4:	6f 91       	pop	r22
 3c6:	5f 91       	pop	r21
 3c8:	4f 91       	pop	r20
 3ca:	3f 91       	pop	r19
 3cc:	2f 91       	pop	r18
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <__tablejump2__>:
 3d8:	ee 0f       	add	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	05 90       	lpm	r0, Z+
 3de:	f4 91       	lpm	r31, Z
 3e0:	e0 2d       	mov	r30, r0
 3e2:	09 94       	ijmp

000003e4 <__umulhisi3>:
 3e4:	a2 9f       	mul	r26, r18
 3e6:	b0 01       	movw	r22, r0
 3e8:	b3 9f       	mul	r27, r19
 3ea:	c0 01       	movw	r24, r0
 3ec:	a3 9f       	mul	r26, r19
 3ee:	70 0d       	add	r23, r0
 3f0:	81 1d       	adc	r24, r1
 3f2:	11 24       	eor	r1, r1
 3f4:	91 1d       	adc	r25, r1
 3f6:	b2 9f       	mul	r27, r18
 3f8:	70 0d       	add	r23, r0
 3fa:	81 1d       	adc	r24, r1
 3fc:	11 24       	eor	r1, r1
 3fe:	91 1d       	adc	r25, r1
 400:	08 95       	ret

00000402 <_exit>:
 402:	f8 94       	cli

00000404 <__stop_program>:
 404:	ff cf       	rjmp	.-2      	; 0x404 <__stop_program>
