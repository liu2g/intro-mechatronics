
Lab3_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000070b  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000660  00000000  00000000  00000a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f7  00000000  00000000  00001083  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  0000137c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000370  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d1  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001a49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_11>
  30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  58:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  5c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  60:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  68:	a9 00       	.word	0x00a9	; ????
  6a:	79 00       	.word	0x0079	; ????
  6c:	7c 00       	.word	0x007c	; ????
  6e:	7f 00       	.word	0x007f	; ????
  70:	82 00       	.word	0x0082	; ????
  72:	85 00       	.word	0x0085	; ????
  74:	88 00       	.word	0x0088	; ????
  76:	8b 00       	.word	0x008b	; ????
  78:	8e 00       	.word	0x008e	; ????
  7a:	91 00       	.word	0x0091	; ????
  7c:	94 00       	.word	0x0094	; ????
  7e:	97 00       	.word	0x0097	; ????
  80:	9a 00       	.word	0x009a	; ????
  82:	9d 00       	.word	0x009d	; ????
  84:	a0 00       	.word	0x00a0	; ????
  86:	a3 00       	.word	0x00a3	; ????

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_clear_bss>:
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
  9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
  9e:	a2 30       	cpi	r26, 0x02	; 2
  a0:	b2 07       	cpc	r27, r18
  a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
  a4:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  a8:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <main>:


int main(void)
{
	//Pin config
	DDRD = 0b11101111;
  b0:	8f ee       	ldi	r24, 0xEF	; 239
  b2:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00000111;
  b4:	87 e0       	ldi	r24, 0x07	; 7
  b6:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00111111;
  b8:	9f e3       	ldi	r25, 0x3F	; 63
  ba:	97 b9       	out	0x07, r25	; 7
	

	//Timer and interrupt config
	cli();
  bc:	f8 94       	cli
	TCCR1A = (0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM10); //Timer1 CTC
  be:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(1<<CS12)|(0<<CS11)|(0<<CS10); //Timer1 scaled by 256
  c2:	9c e0       	ldi	r25, 0x0C	; 12
  c4:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = (0<<ICIE1)|(0<<OCIE1B)|(1<<OCIE1A)|(0<<TOIE1); //Enable match interrupt
  c8:	92 e0       	ldi	r25, 0x02	; 2
  ca:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	OCR1A = 62; //1 ms
  ce:	2e e3       	ldi	r18, 0x3E	; 62
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  d6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCCR0A = (0<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(0<<WGM00); 
  da:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(1<<CS02)|(1<<CS01)|(1<<CS00); //External clk on T0 for counting on rising edge
  dc:	85 bd       	out	0x25, r24	; 37
	sei(); //Enable global interrupt
  de:	78 94       	sei
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <main+0x30>

000000e2 <bin_to_segs>:
    }
}

int bin_to_segs (int bin_value) //Converts 4 bit value from switches to 7 bit A-G segs
{
	switch (bin_value)
  e2:	80 31       	cpi	r24, 0x10	; 16
  e4:	91 05       	cpc	r25, r1
  e6:	90 f5       	brcc	.+100    	; 0x14c <bin_to_segs+0x6a>
  e8:	fc 01       	movw	r30, r24
  ea:	ec 5c       	subi	r30, 0xCC	; 204
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__tablejump2__>
	{
		case 0x0:
			return 0b1111110;
			break;
		case 0x1:
			return 0b0110000;
  f2:	80 e3       	ldi	r24, 0x30	; 48
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	08 95       	ret
			break;
		case 0x2:
			return 0b1101101;
  f8:	8d e6       	ldi	r24, 0x6D	; 109
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	08 95       	ret
			break;
		case 0x3:
			return 0b1111001;
  fe:	89 e7       	ldi	r24, 0x79	; 121
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	08 95       	ret
			break;
		case 0x4:
			return 0b0110011;
 104:	83 e3       	ldi	r24, 0x33	; 51
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	08 95       	ret
			break;
		case 0x5:
			return 0b1011011;
 10a:	8b e5       	ldi	r24, 0x5B	; 91
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	08 95       	ret
			break;
		case 0x6:
			return 0b1011111;
 110:	8f e5       	ldi	r24, 0x5F	; 95
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	08 95       	ret
			break;
		case 0x7:
			return 0b1110000;
 116:	80 e7       	ldi	r24, 0x70	; 112
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	08 95       	ret
			break;
		case 0x8:
			return 0b1111111;
 11c:	8f e7       	ldi	r24, 0x7F	; 127
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	08 95       	ret
			break;
		case 0x9:
			return 0b1110011;
 122:	83 e7       	ldi	r24, 0x73	; 115
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	08 95       	ret
			break;
		case 0xA:
			return 0b1110111;
 128:	87 e7       	ldi	r24, 0x77	; 119
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	08 95       	ret
			break;
		case 0xb:
			return 0b0011111;
 12e:	8f e1       	ldi	r24, 0x1F	; 31
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	08 95       	ret
			break;
		case 0xC:
			return 0b1001110;
 134:	8e e4       	ldi	r24, 0x4E	; 78
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	08 95       	ret
			break;
		case 0xd:
			return 0b0111101;
 13a:	8d e3       	ldi	r24, 0x3D	; 61
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	08 95       	ret
			break;
		case 0xE:
			return 0b1001111;
 140:	8f e4       	ldi	r24, 0x4F	; 79
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	08 95       	ret
			break;
		case 0xF:
			return 0b1000111;
 146:	87 e4       	ldi	r24, 0x47	; 71
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret
			break;
		default:
			return 0b0000000;
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret
int bin_to_segs (int bin_value) //Converts 4 bit value from switches to 7 bit A-G segs
{
	switch (bin_value)
	{
		case 0x0:
			return 0b1111110;
 152:	8e e7       	ldi	r24, 0x7E	; 126
 154:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			return 0b0000000;
				
	}
}
 156:	08 95       	ret

00000158 <__vector_11>:
volatile uint8_t seg_bin = 0; //7 bit var to store 7 seg on/off values
int bin_to_segs (int);

//Interrupt to toggle two 7 seg selects b/w 01 and 10
ISR(TIMER1_COMPA_vect)
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	if (seg_sel) {
 17a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <seg_sel>
 17e:	88 23       	and	r24, r24
 180:	51 f0       	breq	.+20     	; 0x196 <__vector_11+0x3e>
		PORTB |= (1 << PORTB0); //Deselect first 7 seg
 182:	28 9a       	sbi	0x05, 0	; 5
		PORTB &= ~(1 << PORTB1); //Select second 7 seg
 184:	29 98       	cbi	0x05, 1	; 5
		seg_bin = bin_to_segs( TCNT0 & 0b1111 );
 186:	86 b5       	in	r24, 0x26	; 38
 188:	8f 70       	andi	r24, 0x0F	; 15
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 71 00 	call	0xe2	; 0xe2 <bin_to_segs>
 190:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 194:	0a c0       	rjmp	.+20     	; 0x1aa <__vector_11+0x52>
		//PORTC = (~PIND) & 0b111111;
	}
	else {
		PORTB &= ~(1 << PORTB0); //Select first 7 seg
 196:	28 98       	cbi	0x05, 0	; 5
		PORTB |= (1 << PORTB1); //Deselect second 7 seg
 198:	29 9a       	sbi	0x05, 1	; 5
		seg_bin = bin_to_segs( (TCNT0 >> 4) & 0b1111 );
 19a:	86 b5       	in	r24, 0x26	; 38
 19c:	82 95       	swap	r24
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 71 00 	call	0xe2	; 0xe2 <bin_to_segs>
 1a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		//PORTC = (~PIND) & 0b111111;
	}
	
	//Turn on/off seg A
	if (seg_bin >> 6) PORTB |= (1 << PORTB2);
 1aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1ae:	82 95       	swap	r24
 1b0:	86 95       	lsr	r24
 1b2:	86 95       	lsr	r24
 1b4:	83 70       	andi	r24, 0x03	; 3
 1b6:	11 f0       	breq	.+4      	; 0x1bc <__vector_11+0x64>
 1b8:	2a 9a       	sbi	0x05, 2	; 5
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <__vector_11+0x66>
	else PORTB &= ~(1 << PORTB2);
 1bc:	2a 98       	cbi	0x05, 2	; 5
	
	//Turn on/off seg B-G
	PORTC = seg_bin & 0b111111;
 1be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1c2:	8f 73       	andi	r24, 0x3F	; 63
 1c4:	88 b9       	out	0x08, r24	; 8
	
	//Toggle flag
	seg_sel ^= 1;
 1c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <seg_sel>
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	89 27       	eor	r24, r25
 1ce:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <seg_sel>
}
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	7f 91       	pop	r23
 1e0:	6f 91       	pop	r22
 1e2:	5f 91       	pop	r21
 1e4:	4f 91       	pop	r20
 1e6:	3f 91       	pop	r19
 1e8:	2f 91       	pop	r18
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <__tablejump2__>:
 1f4:	ee 0f       	add	r30, r30
 1f6:	ff 1f       	adc	r31, r31
 1f8:	05 90       	lpm	r0, Z+
 1fa:	f4 91       	lpm	r31, Z
 1fc:	e0 2d       	mov	r30, r0
 1fe:	09 94       	ijmp

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
