
Lab3_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000270  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000002e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000746  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000660  00000000  00000000  00000aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032d  00000000  00000000  0000112a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001458  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000387  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d1  00000000  00000000  0000186b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001b3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_11>
  30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  58:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  5c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  60:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  68:	c7 00       	.word	0x00c7	; ????
  6a:	97 00       	.word	0x0097	; ????
  6c:	9a 00       	.word	0x009a	; ????
  6e:	9d 00       	.word	0x009d	; ????
  70:	a0 00       	.word	0x00a0	; ????
  72:	a3 00       	.word	0x00a3	; ????
  74:	a6 00       	.word	0x00a6	; ????
  76:	a9 00       	.word	0x00a9	; ????
  78:	ac 00       	.word	0x00ac	; ????
  7a:	af 00       	.word	0x00af	; ????
  7c:	b2 00       	.word	0x00b2	; ????
  7e:	b5 00       	.word	0x00b5	; ????
  80:	b8 00       	.word	0x00b8	; ????
  82:	bb 00       	.word	0x00bb	; ????
  84:	be 00       	.word	0x00be	; ????
  86:	c1 00       	.word	0x00c1	; ????

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_clear_bss>:
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
  9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
  9e:	a6 30       	cpi	r26, 0x06	; 6
  a0:	b2 07       	cpc	r27, r18
  a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
  a4:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  a8:	0c 94 36 01 	jmp	0x26c	; 0x26c <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <main>:
}

int main(void)
{
	//Pin config
	DDRD = 0b11111110;
  b0:	8e ef       	ldi	r24, 0xFE	; 254
  b2:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00000111;
  b4:	87 e0       	ldi	r24, 0x07	; 7
  b6:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00111111;
  b8:	8f e3       	ldi	r24, 0x3F	; 63
  ba:	87 b9       	out	0x07, r24	; 7
	

	//Timer and interrupt config
	cli();
  bc:	f8 94       	cli
	TCCR1A = (0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM10); //Timer1 CTC
  be:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(1<<CS10); //Timer1 scaled by 64
  c2:	8b e0       	ldi	r24, 0x0B	; 11
  c4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = (0<<ICIE1)|(0<<OCIE1B)|(1<<OCIE1A)|(0<<TOIE1); //Enable match interrupt
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	OCR1A = 16; //1 ms / 16
  ce:	80 e1       	ldi	r24, 0x10	; 16
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	//OCR1A = 47; //3 ms / 16
	sei(); //Enable global interrupt
  da:	78 94       	sei
		switch (onoff)
		{
			case 0:
				if (shift == 0x7FFF) {
					edge_count += 1;
					onoff = 1;
  dc:	21 e0       	ldi	r18, 0x01	; 1
	sei(); //Enable global interrupt
	
	
    while (1) 
    {
		switch (onoff)
  de:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <onoff>
  e2:	88 23       	and	r24, r24
  e4:	19 f0       	breq	.+6      	; 0xec <main+0x3c>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	81 f0       	breq	.+32     	; 0x10a <main+0x5a>
  ea:	f9 cf       	rjmp	.-14     	; 0xde <main+0x2e>
		{
			case 0:
				if (shift == 0x7FFF) {
  ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <shift>
  f0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <shift+0x1>
  f4:	8f 3f       	cpi	r24, 0xFF	; 255
  f6:	9f 47       	sbci	r25, 0x7F	; 127
  f8:	91 f7       	brne	.-28     	; 0xde <main+0x2e>
					edge_count += 1;
  fa:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <edge_count>
  fe:	8f 5f       	subi	r24, 0xFF	; 255
 100:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <edge_count>
					onoff = 1;
 104:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <onoff>
 108:	ea cf       	rjmp	.-44     	; 0xde <main+0x2e>
				}
				break;
			case 1:
				if (shift == 0x8000) {
 10a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <shift>
 10e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <shift+0x1>
 112:	81 15       	cp	r24, r1
 114:	90 48       	sbci	r25, 0x80	; 128
 116:	19 f7       	brne	.-58     	; 0xde <main+0x2e>
					onoff = 0;
 118:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <onoff>
 11c:	e0 cf       	rjmp	.-64     	; 0xde <main+0x2e>

0000011e <bin_to_segs>:
    }
}

int bin_to_segs (int bin_value) //Converts 4 bit value from switches to 7 bit A-G segs
{
	switch (bin_value)
 11e:	80 31       	cpi	r24, 0x10	; 16
 120:	91 05       	cpc	r25, r1
 122:	90 f5       	brcc	.+100    	; 0x188 <bin_to_segs+0x6a>
 124:	fc 01       	movw	r30, r24
 126:	ec 5c       	subi	r30, 0xCC	; 204
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	0c 94 30 01 	jmp	0x260	; 0x260 <__tablejump2__>
	{
		case 0x0:
			return 0b1111110;
			break;
		case 0x1:
			return 0b0110000;
 12e:	80 e3       	ldi	r24, 0x30	; 48
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	08 95       	ret
			break;
		case 0x2:
			return 0b1101101;
 134:	8d e6       	ldi	r24, 0x6D	; 109
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	08 95       	ret
			break;
		case 0x3:
			return 0b1111001;
 13a:	89 e7       	ldi	r24, 0x79	; 121
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	08 95       	ret
			break;
		case 0x4:
			return 0b0110011;
 140:	83 e3       	ldi	r24, 0x33	; 51
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	08 95       	ret
			break;
		case 0x5:
			return 0b1011011;
 146:	8b e5       	ldi	r24, 0x5B	; 91
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret
			break;
		case 0x6:
			return 0b1011111;
 14c:	8f e5       	ldi	r24, 0x5F	; 95
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret
			break;
		case 0x7:
			return 0b1110000;
 152:	80 e7       	ldi	r24, 0x70	; 112
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret
			break;
		case 0x8:
			return 0b1111111;
 158:	8f e7       	ldi	r24, 0x7F	; 127
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	08 95       	ret
			break;
		case 0x9:
			return 0b1110011;
 15e:	83 e7       	ldi	r24, 0x73	; 115
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	08 95       	ret
			break;
		case 0xA:
			return 0b1110111;
 164:	87 e7       	ldi	r24, 0x77	; 119
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	08 95       	ret
			break;
		case 0xb:
			return 0b0011111;
 16a:	8f e1       	ldi	r24, 0x1F	; 31
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	08 95       	ret
			break;
		case 0xC:
			return 0b1001110;
 170:	8e e4       	ldi	r24, 0x4E	; 78
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	08 95       	ret
			break;
		case 0xd:
			return 0b0111101;
 176:	8d e3       	ldi	r24, 0x3D	; 61
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	08 95       	ret
			break;
		case 0xE:
			return 0b1001111;
 17c:	8f e4       	ldi	r24, 0x4F	; 79
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	08 95       	ret
			break;
		case 0xF:
			return 0b1000111;
 182:	87 e4       	ldi	r24, 0x47	; 71
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	08 95       	ret
			break;
		default:
			return 0b0000000;
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	08 95       	ret
int bin_to_segs (int bin_value) //Converts 4 bit value from switches to 7 bit A-G segs
{
	switch (bin_value)
	{
		case 0x0:
			return 0b1111110;
 18e:	8e e7       	ldi	r24, 0x7E	; 126
 190:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			return 0b0000000;
				
	}
}
 192:	08 95       	ret

00000194 <__vector_11>:
volatile uint8_t seg_bin = 0; //7 bit var to store 7 seg on/off values
int bin_to_segs (int);

//Interrupt to toggle two 7 seg selects b/w 01 and 10
ISR(TIMER1_COMPA_vect)
{
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	5f 93       	push	r21
 1a6:	6f 93       	push	r22
 1a8:	7f 93       	push	r23
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
	shift = shift << 1;
 1b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <shift>
 1ba:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <shift+0x1>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <shift+0x1>
 1c6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <shift>
	if (PIND == 0) shift |= 1; //if pin is LOW, shift a 1; otherwise shift a 0
 1ca:	89 b1       	in	r24, 0x09	; 9
 1cc:	81 11       	cpse	r24, r1
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <__vector_11+0x4e>
 1d0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <shift>
 1d4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <shift+0x1>
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <shift+0x1>
 1de:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <shift>
	if (seg_sel) {
 1e2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <seg_sel>
 1e6:	88 23       	and	r24, r24
 1e8:	59 f0       	breq	.+22     	; 0x200 <__vector_11+0x6c>
		PORTB |= (1 << PORTB0); //Deselect first 7 seg
 1ea:	28 9a       	sbi	0x05, 0	; 5
		PORTB &= ~(1 << PORTB1); //Select second 7 seg
 1ec:	29 98       	cbi	0x05, 1	; 5
		seg_bin = bin_to_segs( edge_count & 0b1111 );
 1ee:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <edge_count>
 1f2:	8f 70       	andi	r24, 0x0F	; 15
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 8f 00 	call	0x11e	; 0x11e <bin_to_segs>
 1fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1fe:	0b c0       	rjmp	.+22     	; 0x216 <__vector_11+0x82>
		//PORTC = (~PIND) & 0b111111;
	}
	else {
		PORTB &= ~(1 << PORTB0); //Select first 7 seg
 200:	28 98       	cbi	0x05, 0	; 5
		PORTB |= (1 << PORTB1); //Deselect second 7 seg
 202:	29 9a       	sbi	0x05, 1	; 5
		seg_bin = bin_to_segs( (edge_count >> 4) & 0b1111 );
 204:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <edge_count>
 208:	82 95       	swap	r24
 20a:	8f 70       	andi	r24, 0x0F	; 15
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 8f 00 	call	0x11e	; 0x11e <bin_to_segs>
 212:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		//PORTC = (~PIND) & 0b111111;
	}
	
	//Turn on/off seg A
	if (seg_bin >> 6) PORTB |= (1 << PORTB2);
 216:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 21a:	82 95       	swap	r24
 21c:	86 95       	lsr	r24
 21e:	86 95       	lsr	r24
 220:	83 70       	andi	r24, 0x03	; 3
 222:	11 f0       	breq	.+4      	; 0x228 <__vector_11+0x94>
 224:	2a 9a       	sbi	0x05, 2	; 5
 226:	01 c0       	rjmp	.+2      	; 0x22a <__vector_11+0x96>
	else PORTB &= ~(1 << PORTB2);
 228:	2a 98       	cbi	0x05, 2	; 5
	
	//Turn on/off seg B-G
	PORTC = seg_bin & 0b111111;
 22a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 22e:	8f 73       	andi	r24, 0x3F	; 63
 230:	88 b9       	out	0x08, r24	; 8
	
	//Toggle flag
	seg_sel ^= 1;
 232:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <seg_sel>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	89 27       	eor	r24, r25
 23a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <seg_sel>
}
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <__tablejump2__>:
 260:	ee 0f       	add	r30, r30
 262:	ff 1f       	adc	r31, r31
 264:	05 90       	lpm	r0, Z+
 266:	f4 91       	lpm	r31, Z
 268:	e0 2d       	mov	r30, r0
 26a:	09 94       	ijmp

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
